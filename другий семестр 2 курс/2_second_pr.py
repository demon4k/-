class Student:
    def __init__(self, name=None, surname=None, birth_year=None):
        self.name = name
        self.surname = surname
        self.birth_year = birth_year

    def get_course(self):
        if self.birth_year:
            current_year = 2025  # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –∑–∞—Ä–∞–∑ 2025 —Ä—ñ–∫
            age_at_start = 17  # –í—ñ–∫ –≤—Å—Ç—É–ø—É –¥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É
            return max(1, current_year - self.birth_year - age_at_start + 1)
        return None

    def get_name_list(self):
        return [self.name, self.surname]


# üîπ –î–æ—á—ñ—Ä–Ω—ñ–π –∫–ª–∞—Å
class AdvancedStudent(Student):
    def __init__(self, name=None, surname=None, birth_year=None, university=None, faculty=None, average_grade=None):
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
        super().__init__(name, surname, birth_year)
        
        # –î–æ–¥–∞—î–º–æ 3 –Ω–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
        self._university = university  # –ó–∞—Ö–∏—â–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç (protected)
        self.faculty = faculty
        self.__average_grade = average_grade  # –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç (private)

    # üîπ –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å—Ç—É–¥–µ–Ω—Ç –æ—Ç—Ä–∏–º—É—î —Å—Ç–∏–ø–µ–Ω–¥—ñ—é
    def has_scholarship(self):
        return self.__average_grade is not None and self.__average_grade >= 4.5

    # üîπ –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å—Ç—É–¥–µ–Ω—Ç –≤–∏–ø—É—Å–∫–∞—î—Ç—å—Å—è
    def is_graduating(self):
        return self.get_course() == 4  # –í–∏–ø—É—Å–∫ –Ω–∞ 4 –∫—É—Ä—Å—ñ

    # üîπ –ì–µ—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
    def get_average_grade(self):
        return self.__average_grade


# üîπ –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–æ–Ω—Å–æ–ª—ñ
name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: ")
surname = input("–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ: ")

while True:
    try:
        birth_year = int(input("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: "))
        break
    except ValueError:
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—á–∏—Å–ª–æ).")

university = input("–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç: ")
faculty = input("–í–≤–µ–¥—ñ—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ")

while True:
    try:
        average_grade = float(input("–í–≤–µ–¥—ñ—Ç—å —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª (0-5): "))
        if 0 <= average_grade <= 5:
            break
        else:
            print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 5.")
    except ValueError:
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")

# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
student = AdvancedStudent(name, surname, birth_year, university, faculty, average_grade)

# üîπ –í–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
print(f"–Ü–º'—è: {student.name}")
print(f"–ü—Ä—ñ–∑–≤–∏—â–µ: {student.surname}")
print(f"–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {student.birth_year}")
print(f"–ö—É—Ä—Å: {student.get_course()}")
print(f"–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç: {student._university}")  # –ó–∞—Ö–∏—â–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç
print(f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {student.faculty}")
print(f"–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: {student.get_average_grade()}")

print(f"–û—Ç—Ä–∏–º—É—î —Å—Ç–∏–ø–µ–Ω–¥—ñ—é: {'–¢–∞–∫' if student.has_scholarship() else '–ù—ñ'}")
print(f"–ß–∏ –≤–∏–ø—É—Å–∫–∞—î—Ç—å—Å—è: {'–¢–∞–∫' if student.is_graduating() else '–ù—ñ'}")
